{"ts":1365389636670,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Create your views here.\nfrom django.db import DatabaseError\nfrom django.contrib.auth.models import User\nfrom django.contrib import auth\nfrom django.template import Template,Context, RequestContext\nfrom django.template.loader import get_template\nfrom django.views.generic.simple import direct_to_template\nfrom C2C.forms import RegistrationForm\nfrom django.shortcuts import render_to_response\nfrom django.http import HttpRequest, HttpResponse, HttpResponseRedirect\nfrom C2C.models import *\n\nimport re\n\n\ndef registration(request):\n    \"\"\"\n\n    :param request:\n    :return:\n    \"\"\"\n    if request.method == 'POST' and request.POST[\"password\"] == request.POST[\"retype_password\"]:\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            cleaned_data = form.cleaned_data\n            try:\n                p = Customer(first_name=cleaned_data[\"First_Name\"],  #Creating for entering it in to Database\n                             last_name=cleaned_data[\"Last_Name\"],\n                             phno=cleaned_data[\"phno\"],\n                             email=cleaned_data[\"email\"],\n                             username=cleaned_data['username']\n                             )\n                p.save()\n                user = User.objects.create_user(username=cleaned_data['username'], #for user Authentication\n                                                email=cleaned_data['email'],\n                                                password=cleaned_data['password'],\n                                                )\n                user.first_name = cleaned_data['First_Name']\n                user.last_name = cleaned_data['Last_Name']\n                user.is_active = True\n                user.save()\n                return render_to_response(\"thanks.html\", {}, context_instance=RequestContext(request))\n            except DatabaseError:\n                print \"Database Error Occured\"\n                return render_to_response(\"oops.html\", {}, context_instance=RequestContext(request))\n    else:\n        form = RegistrationForm()\n    t = get_template(\"registration.html\")\n    c = RequestContext(request, {\"form\": form})\n    return HttpResponse(t.render(c))\n    #return render_to_response(\"registration.html\", {\"form\":form})\n\n\n\ndef thanku(request):\n    return direct_to_template(request, \"thanks.html\")\n\n\ndef oops(requst):\n    return HttpResponse(\"Some thing wrong Happened! Sorry. Please try after some time.\")\n\n\ndef index(request):\n    return render_to_response(\"index.html\", {}, context_instance=RequestContext(request))\n\n\ndef search(request):\n    if request.method == 'POST':\n\n        if 'search' in request.POST and not request.POST['search']:\n            ad_id = []\n            regular = re.compile('\\w' + request.POST['search'] + '\\w')\n            try:\n                for i in Advertisement.objects.all(): #Using Query set to iterate through the model\n                    if regular.match(i.name):\n                        ad_id.append(i.id)\n                    elif regular.match(i.type):\n                        ad_id.append(i.id)\n                    elif regular.match(i.description):\n                        ad_id.append(i.id)\n                #list = Advertisement.objects.get()\n                message = \"you have searched for %s \" % request.POST['search']\n            except Advertisement.DoesNotExist:\n                message = \"Sorry! What you are searching is not found..\"\n        else:\n            message = \"you have submitted an empty form\"\n        return HttpResponse(message)\n\n\ndef login(request):\n    \"\"\"\n\n    :param request:\n    :return:\n    \"\"\"\n    \"\"\"m = Customer.objects.get(username=request.POST['username'])\n    if m.password == request.POST['password']:\n        request.session['user_id'] = m.id\"\"\"\n    username = request.POST['name']\n    password = request.POST['password']\n    user = auth.authenticate(username=username, password=password)\n    if user is not None and user.is_active:\n        auth.login(request, user)\n        return render_to_response('welcome.html', {},\n                                  context_instance=RequestContext(request))\n    else:\n        return render_to_response('sorry.html', {},\n                                  context_instance=RequestContext(request))\n\n\n\n\ndef logout(request):\n    \"\"\"try:\n        del request.session['user_id']\n    except KeyError:\n        pass\n    return render_to_response('index.html', {},\n                              context_instance=RequestContext(request))\n\"\"\"\n    auth.logout(request)\n    return render_to_response('index.html', {},\n                              context_instance=RequestContext(request))\n\n\ndef login_form(request):\n    return direct_to_template(request,\"login_form.html\")\n\n\ndef add(request):\n    if not request.user.is_authenticated():\n        return HttpResponseRedirect('/')\n    else:\n        diction = {}\n        if request.method == 'POST':\n            form = AdvertiseForm(request.POST)\n            if form.is_valid():\n                try:\n                    advertise = form.save(commit=False)\n                    username = Customer.objects.get(username=request.user)\n                    advertise.ad_by = username\n                    advertise.save()\n                    diction['add'] = True\n                except DatabaseError:\n                    print \"Database Error Occured\"\n                    diction['add'] = False\n                finally:\n                    return render_to_response(\"index.html\", diction,\n                                              context_instance=RequestContext(request))\n        else:\n            form = AdvertiseForm()\n            return render_to_response(\"advertisement_form.html\", {'form': form},\n                                      context_instance=RequestContext(request))\n\n\n\n\n#def add_register(reqeust):"]],"start1":0,"start2":0,"length1":0,"length2":5789}]],"length":5789}
{"contributors":[],"silentsave":true,"ts":1365389655414,"patch":[[{"diffs":[[0,"et_template\n"],[1,"#"],[0,"from django."]],"start1":235,"start2":235,"length1":24,"length2":25}]],"length":5790,"saved":false}
